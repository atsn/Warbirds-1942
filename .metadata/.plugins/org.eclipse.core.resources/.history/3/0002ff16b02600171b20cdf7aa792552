package wit.cgd.warbirds.game.objects;

import wit.cgd.warbirds.game.Assets;
import wit.cgd.warbirds.game.objects.Bullet.BulletType;
import wit.cgd.warbirds.game.util.AudioManager;
import wit.cgd.warbirds.game.util.Constants;
import wit.cgd.warbirds.game.util.GamePreferences;
import wit.cgd.warbirds.game.util.GameStats;

import com.badlogic.gdx.graphics.g2d.Animation;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.g2d.TextureRegion;
import com.badlogic.gdx.math.MathUtils;

public class Player extends AbstractGameObject
{

	public static final String TAG = Player.class.getName();
	public boolean isdead;
	private Animation<TextureRegion> animation;
	private TextureRegion region;
	private float timeShootDelay;
	float maxlife;
	float life;
	boolean hasshield;
	int shieldlife;
	Bullet.BulletType bulletType;

	public Player(Level level)
	{
		super(level);
		init();
	}

	public void init()
	{
		hasshield = false;
		shieldlife = 0;
		dimension.set(1, 1);
		animation = Assets.instance.player.animationNormal;
		setAnimation(animation);

		// Center image on game object
		origin.set(dimension.x / 2, dimension.y / 2);
		timeShootDelay = 0;
		state = State.ACTIVE;
		isdead = false;
		if (!level.ishigestdificulity)
		{
			maxlife = 100 - GamePreferences.instance.dificulity * 20;

		}
		else
		{
			maxlife = 1;

		}
		life = maxlife;
		bulletType = BulletType.normalBullet;
	}

	@Override
	public void update(float deltaTime)
	{
		super.update(deltaTime);
		position.x = MathUtils.clamp(position.x, -Constants.VIEWPORT_WIDTH / 2, Constants.VIEWPORT_WIDTH / 2 - 1f);
		position.y = MathUtils.clamp(position.y, level.start + 1.5f, level.end - 1.5f);
		timeShootDelay -= deltaTime;
	}

	public void shoot()
	{

		if (timeShootDelay > 0) return;

		AudioManager.instance.play(Assets.instance.sounds.shoot1);
		// get bullet
		Bullet bullet = level.bulletPool.obtain();
		bullet.reset();
		bullet.position.set(position.x + 0.25f, position.y + 0.25f);
		bullet.level = this.level;
		bullet.bulletType = bulletType;

		level.bullets.add(bullet);
		timeShootDelay = Constants.PLAYER_SHOOT_DELAY;

	}

	public void setshield()
	{
		hasshield = true;
		shieldlife = (int) (maxlife * 2);
	}

	public void render(SpriteBatch batch)
	{

		region = (TextureRegion) animation.getKeyFrame(stateTime, true);
		batch.draw(region.getTexture(), position.x, position.y, origin.x, origin.y, dimension.x, dimension.y, 1, 1, rotation, region.getRegionX(), region.getRegionY(), region.getRegionWidth(),
				region.getRegionHeight(), false, false);

		region = (TextureRegion) Assets.instance.Smoke.animation.getKeyFrame(stateTime, true);

		if (!level.ishigestdificulity)
		{
			if (life <= 10 && !isdead)
			{
				batch.draw(region.getTexture(), position.x - origin.x, position.y - origin.y, origin.x, origin.y, dimension.x * 2, dimension.y * 2, 1, 1, rotation, region.getRegionX(),
						region.getRegionY(), region.getRegionWidth(), region.getRegionHeight(), false, false);
			}
			if (life < (maxlife * 0.3f) && !isdead)
			{
				batch.draw(region.getTexture(), position.x + 0.5f, position.y + 0.5f, origin.x, origin.y, dimension.x / 2.5f, dimension.y / 2.5f, 1, 1, rotation, region.getRegionX(),
						region.getRegionY(), region.getRegionWidth(), region.getRegionHeight(), false, false);
			}
			if (life < (maxlife * 0.5f) && !isdead)
			{
				batch.draw(region.getTexture(), position.x + 0.3f, position.y + 0.5f, origin.x, origin.y + 0.5f, dimension.x / 2.5f, dimension.y / 2.5f, 1, 1, rotation, region.getRegionX(),
						region.getRegionY(), region.getRegionWidth(), region.getRegionHeight(), false, false);
			}
			if (life < (maxlife * 0.7f) && !isdead)

			{
				batch.draw(region.getTexture(), position.x + 0.15f, position.y + 0.5f, origin.x, origin.y, dimension.x / 2.5f, dimension.y / 2.5f, 1, 1, rotation, region.getRegionX(),
						region.getRegionY(), region.getRegionWidth(), region.getRegionHeight(), false, false);

			}
		}
		
		if (hasshield)
		{
			region = (TextureRegion) Assets.instance.shield.region;
			batch.draw(region.getTexture(), position.x, position.y, origin.x, origin.y, dimension.x, dimension.y, 1, 1, rotation, region.getRegionX(), region.getRegionY(), region.getRegionWidth(),
					region.getRegionHeight(), false, false);
		}

	}

	public void hit(float damage)
	{
		if (hasshield)
		{
			shieldlife = (int) (shieldlife - damage);
			if (shieldlife < 0)
			{
				AudioManager.instance.play(Assets.instance.sounds.bossnottakindamagesound);
				hasshield = false;
			}
		}
		else
		{
			life = life - damage;
			AudioManager.instance.play(Assets.instance.sounds.click_2);
			if (life <= 0)
			{
				die();
			}
		}

	}

	public boolean UpradeBullet()
	{
		if (bulletType == BulletType.normalBullet)
		{
			bulletType = BulletType.DubbleBullet;
			return true;
		}

		if (bulletType == BulletType.DubbleBullet)
		{
			bulletType = BulletType.powerBullet;
			return true;
		}

		return false;
	}

	public void die()
	{
		if (!isdead)
		{
			AudioManager.instance.play(Assets.instance.sounds.explotion_large);
			velocity.x = 0;
			velocity.y = 0;
			isdead = true;
			animation = Assets.instance.player.animationExplosionBig;
			animation.setPlayMode(Animation.PlayMode.NORMAL);
			super.setAnimation(animation);
			GameStats.instance.removefromscore(100);
		}

	}
}
