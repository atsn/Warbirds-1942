package wit.cgd.warbirds.game;

import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.g2d.TextureRegion;
import com.badlogic.gdx.utils.Align;
import com.badlogic.gdx.utils.Disposable;
import wit.cgd.warbirds.game.util.Constants;
import wit.cgd.warbirds.game.util.GamePreferences;
import wit.cgd.warbirds.game.util.GameStats;

public class WorldRenderer implements Disposable
{

	private static final String TAG = WorldRenderer.class.getName();

	public OrthographicCamera camera;
	public OrthographicCamera cameraGUI;

	private SpriteBatch batch;
	private WorldController worldController;

	public WorldRenderer(WorldController worldController)
	{
		this.worldController = worldController;
		init();
	}

	private void init()
	{
		batch = new SpriteBatch();
		camera = new OrthographicCamera(Constants.VIEWPORT_WIDTH, Constants.VIEWPORT_HEIGHT);
		camera.position.set(0, 0, 0);
		camera.update();
		cameraGUI = new OrthographicCamera(Constants.VIEWPORT_GUI_WIDTH, Constants.VIEWPORT_GUI_HEIGHT);
		cameraGUI.position.set(0, 0, 0);
		cameraGUI.setToOrtho(true); // flip y-axis
		cameraGUI.update();
	}

	public void resize(int width, int height)
	{

		float scale = (float) height / (float) width;
		camera.viewportHeight = scale * Constants.VIEWPORT_HEIGHT;
		camera.update();
		cameraGUI.viewportHeight = Constants.VIEWPORT_GUI_HEIGHT;
		cameraGUI.viewportWidth = scale * Constants.VIEWPORT_GUI_HEIGHT;
		cameraGUI.position.set(cameraGUI.viewportWidth / 2, cameraGUI.viewportHeight / 2, 0);
		cameraGUI.update();

		// update level decoration
		worldController.level.levelDecoration.scale.y = scale;
	}

	public void render()
	{

		// Game rendering
		worldController.cameraHelper.applyTo(camera);
		batch.setProjectionMatrix(camera.combined);
		batch.begin();
		worldController.level.render(batch);
		batch.end();

		// GUI + HUD rendering

		batch.setProjectionMatrix(cameraGUI.combined);
		batch.begin();
		// TODO
		renderGui(batch);
		renderendmesseges(batch);
		batch.end();
	}

	private void renderGui(SpriteBatch batch)
	{
		float x = -15;
		float y = -15;
		Assets.instance.fonts.myFontMedium.draw(batch, "" + GameStats.instance.lastscore, x + 75, y + 37);
		
		float x1 = -15;
		float y1 = 60;
		
		TextureRegion region = Assets.instance.player.region;
		batch.draw(region, 35+75, y1+37);
		
		Assets.instance.fonts.myFontMedium.draw(batch, "" + worldController.lives, x1 + 75, y1 + 45);
	}

	public void renderendmesseges(SpriteBatch batch)
	{

		float x = cameraGUI.position.x;
		float y = cameraGUI.position.y;
		
		if (worldController.isgameover())
		{
		 Assets.instance.fonts.gameoverbig.draw(batch, "GAME OVER", x, y, 0, Align.center, true);
		}
		else if (worldController.haswon() &&  !worldController.islastlevel())
		{
			 Assets.instance.fonts.gameoverbig.draw(batch, "LEVEL WON", x, y, 0, Align.center, true);
			
		}
		else if (worldController.haswon() && worldController.islastlevel())
		{
			 Assets.instance.fonts.gameoverbig.draw(batch, "GAME WON", x, y, 0, Align.center, true);
		
		}
	}

	@Override
	public void dispose()
	{
		batch.dispose();
	}
}
